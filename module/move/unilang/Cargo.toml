[package]
name = "unilang"
version = "0.5.0"
edition = "2021"
authors = [
  "Kostiantyn Wandalen <wandalen@obox.systems>",
]
license = "MIT"
readme = "readme.md"
documentation = "https://docs.rs/unilang"
repository = "https://github.com/Wandalen/wTools/tree/master/module/move/unilang"
homepage = "https://github.com/Wandalen/wTools/tree/master/module/move/unilang/readme.md"
description = """
Define your command-line utility interface once and get consistent interaction across multiple modalities — CLI, GUI, TUI, AUI, Web APIs, and more—essentially for free.
"""
categories = [ "command-line-interface", "command-line-utilities" ]
keywords = [ "wtools", "CLI", "CUI", "user-interface" ]
# Note: stress_test_bin in tests/ causes a harmless warning about duplicate targets

[lints]
workspace = true

[package.metadata.docs.rs]
features = [ "full", "error_tools/enabled", "strs_tools/enabled", "mod_interface/enabled", "iter_tools/enabled", "former/enabled" ]
all-features = false

[features]
default = [ "enabled" ]
full = [ "enabled", "on_unknown_suggest" ]
enabled = []
benchmarks = [ "clap", "pico-args" ]

# This configuration suggests an action to be done when the command is unknown. In this case, when an unknown command is encountered, the system might suggest alternatives
on_unknown_suggest = [ "dep:textdistance" ]

[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde_yaml = "0.9"
url = "2.5.0"
chrono = { version = "0.4.38", features = ["serde"] }
regex = "1.10.4"
phf = { version = "0.11", features = ["macros"] }

## internal
error_tools = { workspace = true, features = [ "enabled", "error_typed", "error_untyped" ] }
mod_interface = { workspace = true, features = [ "enabled" ] }
iter_tools = { workspace = true, features = [ "enabled" ] }
former = { workspace = true, features = [ "enabled", "derive_former" ] }
unilang_parser = { workspace = true } # Temporarily removed due to Cargo resolution issues. See module/move/unilang_parser/task.md

## external
log = "0.4"
#closure = "0.3"
textdistance = { version = "1.0", optional = true } # fuzzy commands search
indexmap = "2.2.6"

# Benchmark dependencies (needed for benchmark binaries)
clap = { version = "4.4", optional = true }
pico-args = { version = "0.5", optional = true }

[[bin]]
name = "unilang_cli"
path = "src/bin/unilang_cli.rs"

[[bin]]
name = "comprehensive_benchmark"
path = "benchmark/comprehensive_framework_comparison.rs"



[[test]]
name = "command_loader_test"
path = "tests/inc/phase2/command_loader_test.rs"
[[test]]
name = "cli_integration_test"
path = "tests/inc/phase2/cli_integration_test.rs"

[[test]]
name = "help_generation_test"
path = "tests/inc/phase2/help_generation_test.rs"

[[test]]
name = "data_model_features_test"
path = "tests/inc/phase3/data_model_features_test.rs"

# Performance tests excluded from regular 'cargo test' - run manually if needed
# [[test]]
# name = "performance_stress_test"  
# path = "tests/inc/phase4/performance_stress_test.rs"

# Benchmark tests (ignored by default to prevent accidental long runs)
[[test]]
name = "run_all_benchmarks"
path = "benchmark/run_all_benchmarks.rs"

[[test]]
name = "exponential_benchmark"
path = "benchmark/exponential_benchmark.rs"

[[test]]
name = "framework_comparison"
path = "benchmark/framework_comparison.rs"

[[test]]
name = "parsing_benchmark_test"
path = "benchmark/parsing_benchmark_test.rs"

[[test]]
name = "clap_comparison_benchmark"
path = "benchmark/clap_comparison_benchmark.rs"

[[test]]
name = "true_exponential_benchmark"
path = "benchmark/true_exponential_benchmark.rs"


# stress_test_bin is a binary, not a test - no [[test]] entry needed





[build-dependencies]
phf_codegen = "0.11"
serde = "1.0"
serde_yaml = "0.9"

[dev-dependencies]
test_tools = { workspace = true }
assert_cmd = "2.0"
predicates = "2.1"
assert_fs = "1.0"
clap = "4.4"
pico-args = "0.5"
chrono = "0.4"

criterion = "0.5"
