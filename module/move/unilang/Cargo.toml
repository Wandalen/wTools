[package]
name = "unilang"
version = "0.1.0"
edition = "2021"
authors = [
  "Kostiantyn Wandalen <wandalen@obox.systems>",
]
license = "MIT"
readme = "Readme.md"
documentation = "https://docs.rs/unilang"
repository = "https://github.com/Wandalen/wTools/tree/master/module/move/unilang"
homepage = "https://github.com/Wandalen/wTools/tree/master/module/move/unilang/Readme.md"
description = """
Define your command-line utility interface once and get consistent interaction across multiple modalities — CLI, GUI, TUI, AUI, Web APIs, and more—essentially for free.
"""
categories = [ "command-line-interface", "command-line-utilities" ]
keywords = [ "wtools", "CLI", "CUI", "user-interface" ]

[lints]
workspace = true

[package.metadata.docs.rs]
features = [ "full", "error_tools/enabled", "strs_tools/enabled", "mod_interface/enabled", "iter_tools/enabled", "former/enabled" ]
all-features = false

[features]
default = [ "enabled" ]
full = [ "enabled", "on_unknown_suggest" ]
enabled = []

# This configuration suggests an action to be done when the command is unknown. In this case, when an unknown command is encountered, the system might suggest alternatives
on_unknown_suggest = [ "dep:textdistance" ]

[dependencies]

## internal
error_tools = { workspace = true, features = [ "enabled", "error_typed", "error_untyped" ] }
mod_interface = { workspace = true, features = [ "enabled" ] }
iter_tools = { workspace = true, features = [ "enabled" ] }
former = { workspace = true, features = [ "enabled", "derive_former" ] }

## external
log = "0.4"
#closure = "0.3"
textdistance = { version = "1.0", optional = true } # fuzzy commands search
indexmap = "2.2.6"

[dev-dependencies]
test_tools = { workspace = true }
assert_fs = "1.0"
criterion = "0.5"
