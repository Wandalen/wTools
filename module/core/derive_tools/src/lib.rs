#![ cfg_attr( feature = "no_std", no_std ) ]
#![ doc( html_logo_url = "https://raw.githubusercontent.com/Wandalen/wTools/master/asset/img/logo_v3_trans_square.png" ) ]
#![ doc( html_favicon_url = "https://raw.githubusercontent.com/Wandalen/wTools/alpha/asset/img/logo_v3_trans_square_icon_small_v2.ico" ) ]
#![ doc( html_root_url = "https://docs.rs/derive_tools/latest/derive_tools/" ) ]
#![ doc = include_str!( concat!( env!( "CARGO_MANIFEST_DIR" ), "/", "Readme.md" ) ) ]

// // xxx : implement derive new
//
// #[ derive( Debug, PartialEq, Default ) ]
// pub struct Property< Name >
// {
//   name : Name,
//   description : String,
//   code : isize,
// }
//
// /// generated by new
// impl< Name > Property< Name >
// {
//   #[ inline ]
//   pub fn new< Description, Code >( name : Name, description : Description, code : Code ) -> Self
//   where
//     Name : core::convert::Into< Name >,
//     Description : core::convert::Into< String >,
//     Code : core::convert::Into< isize >,
//   {
//     Self { name : name.into(), description : description.into(), code : code.into() }
//   }
// }

// #[ cfg( feature = "enabled" ) ]
// pub mod wtools;

#[ cfg( all( feature = "derive_more" ) ) ]
#[ allow( unused_imports ) ]
mod derive_more
{
  #[ cfg( feature = "derive_add" ) ]
  pub use ::derive_more::{ Add, Sub };
  #[ cfg( feature = "derive_add_assign" ) ]
  pub use ::derive_more::{ AddAssign, SubAssign };
  #[ cfg( feature = "derive_constructor" ) ]
  pub use ::derive_more::Constructor;
  #[ cfg( feature = "derive_error" ) ]
  pub use ::derive_more::Error;
  #[ cfg( feature = "derive_into" ) ]
  pub use ::derive_more::Into;
  // #[ cfg( feature = "derive_iterator" ) ]
  // pub use ::derive_more::Iterator;
  #[ cfg( feature = "derive_into_iterator" ) ]
  pub use ::derive_more::IntoIterator;
  #[ cfg( feature = "derive_mul" ) ]
  pub use ::derive_more::{ Mul, Div };
  #[ cfg( feature = "derive_mul_assign" ) ]
  pub use ::derive_more::{ MulAssign, DivAssign };
  #[ cfg( feature = "derive_sum" ) ]
  pub use ::derive_more::Sum;
  #[ cfg( feature = "derive_try_into" ) ]
  pub use ::derive_more::TryInto;
  #[ cfg( feature = "derive_is_variant" ) ]
  pub use ::derive_more::IsVariant;
  #[ cfg( feature = "derive_unwrap" ) ]
  pub use ::derive_more::Unwrap;

  // qqq : list all
  // qqq : make sure all features of derive_more is reexported
}

#[ doc( inline ) ]
#[ cfg( any( feature = "derive_variadic_from", feature = "type_variadic_from" ) ) ]
pub use variadic_from as variadic;

/// Namespace with dependencies.

#[ allow( unused_imports ) ]
#[ cfg( feature = "enabled" ) ]
pub mod dependency
{

  #[ doc( inline ) ]
  pub use ::derive_tools_meta;

  #[ doc( inline ) ]
  #[ cfg( feature = "derive_clone_dyn" ) ]
  pub use ::clone_dyn::{ self, dependency::* };

  #[ doc( inline ) ]
  #[ cfg( any( feature = "derive_variadic_from", feature = "type_variadic_from" ) ) ]
  pub use ::variadic_from::{ self, dependency::* };

  #[ doc( inline ) ]
  #[ cfg( feature = "derive_more" ) ]
  pub use ::derive_more;
  #[ doc( inline ) ]
  #[ cfg( feature = "derive_strum" ) ]
  pub use ::strum;
  #[ doc( inline ) ]
  #[ cfg( feature = "parse_display" ) ]
  pub use ::parse_display;

}

#[ doc( inline ) ]
#[ cfg( feature = "enabled" ) ]
#[ allow( unused_imports ) ]
pub use own::*;

/// Own namespace of the module.
#[ cfg( feature = "enabled" ) ]
#[ allow( unused_imports ) ]
pub mod own
{
  use super::*;
  #[ doc( inline ) ]
  pub use orphan::*;
  #[ cfg( feature = "derive_clone_dyn" ) ]
  #[ doc( inline ) ]
  pub use ::clone_dyn::orphan::*;
}

/// Orphan namespace of the module.
#[ cfg( feature = "enabled" ) ]
#[ allow( unused_imports ) ]
pub mod orphan
{
  use super::*;
  #[ doc( inline ) ]
  pub use exposed::*;
}

/// Exposed namespace of the module.
#[ cfg( feature = "enabled" ) ]
#[ allow( unused_imports ) ]
pub mod exposed
{
  use super::*;
  #[ doc( inline ) ]
  pub use prelude::*;

  #[ cfg( all( feature = "derive_more" ) ) ]
  #[ doc( inline ) ]
  pub use super::derive_more::*;

  #[ cfg( feature = "derive_strum" ) ]
  #[ doc( inline ) ]
  pub use ::strum::*;

  #[ cfg( any( feature = "derive_variadic_from", feature = "type_variadic_from" ) ) ]
  #[ doc( inline ) ]
  pub use ::variadic_from::exposed::*;

  #[ cfg( feature = "derive_strum" ) ]
  #[ doc( inline ) ]
  pub use ::strum::*;

  #[ cfg( feature = "derive_display" ) ]
  #[ doc( inline ) ]
  pub use ::parse_display::Display;

  #[ cfg( feature = "derive_from_str" ) ]
  #[ doc( inline ) ]
  pub use ::parse_display::FromStr;

  #[ cfg( feature = "derive_clone_dyn" ) ]
  #[ doc( inline ) ]
  pub use ::clone_dyn::exposed::*;

  #[ cfg( feature = "derive_clone_dyn" ) ]
  #[ doc( inline ) ]
  pub use ::clone_dyn;

  #[ doc( inline ) ]
  pub use ::derive_tools_meta::*;

  #[ doc( inline ) ]
  #[ cfg( feature = "derive_from" ) ]
  pub use ::derive_tools_meta::From;

  #[ doc( inline ) ]
  #[ cfg( feature = "derive_inner_from" ) ]
  pub use ::derive_tools_meta::InnerFrom;

}

/// Prelude to use essentials: `use my_module::prelude::*`.
#[ cfg( feature = "enabled" ) ]
#[ allow( unused_imports ) ]
pub mod prelude
{
  use super::*;
  #[ cfg( feature = "derive_clone_dyn" ) ]
  #[ doc( inline ) ]
  pub use ::clone_dyn;

  #[ cfg( feature = "derive_clone_dyn" ) ]
  #[ doc( inline ) ]
  pub use ::clone_dyn::prelude::*;

  #[ cfg( any( feature = "derive_variadic_from", feature = "type_variadic_from" ) ) ]
  #[ doc( inline ) ]
  pub use ::variadic_from::prelude::*;

}

// xxx : minimize dependendencies
// Adding aho-corasick v1.1.3
// Adding cfg_aliases v0.1.1 (latest: v0.2.1)
// Adding clone_dyn v0.24.0
// Adding clone_dyn_meta v0.24.0
// Adding clone_dyn_types v0.23.0
// Adding collection_tools v0.12.0
// Adding const_format v0.2.33
// Adding const_format_proc_macros v0.2.33
// Adding convert_case v0.6.0
// Adding derive_more v1.0.0
// Adding derive_more-impl v1.0.0
// Adding derive_tools v0.28.0
// Adding derive_tools_meta v0.27.0
// Adding either v1.13.0
// Adding former_types v2.8.0
// Adding heck v0.4.1 (latest: v0.5.0)
// Adding interval_adapter v0.24.0
// Adding iter_tools v0.21.0
// Adding itertools v0.11.0 (latest: v0.13.0)
// Adding macro_tools v0.40.0
// Adding parse-display v0.8.2 (latest: v0.10.0)
// Adding parse-display-derive v0.8.2 (latest: v0.10.0)
// Adding phf v0.10.1 (latest: v0.11.2)
// Adding phf_generator v0.10.0 (latest: v0.11.2)
// Adding phf_macros v0.10.0 (latest: v0.11.2)
// Adding phf_shared v0.10.0 (latest: v0.11.2)
// Adding proc-macro-hack v0.5.20+deprecated
// Adding regex v1.10.6
// Adding regex-automata v0.4.7
// Adding regex-syntax v0.7.5 (latest: v0.8.4)
// Adding regex-syntax v0.8.4
// Adding rustversion v1.0.17
// Adding structmeta v0.2.0 (latest: v0.3.0)
// Adding structmeta-derive v0.2.0 (latest: v0.3.0)
// Adding strum v0.25.0 (latest: v0.26.3)
// Adding strum_macros v0.25.3 (latest: v0.26.4)
// Adding unicode-segmentation v1.11.0
// Adding unicode-xid v0.2.5
// Adding variadic_from v0.23.0