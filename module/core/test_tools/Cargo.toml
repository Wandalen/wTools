[package]
name = "test_tools"
version = "0.16.0"
edition = "2021"
authors = [
  "Kostiantyn Wandalen <wandalen@obox.systems>",
  "Dmytro Kryvoruchko <dmytro.kr@obox.systems>",
]
license = "MIT"
readme = "readme.md"
documentation = "https://docs.rs/test_tools"
repository = "https://github.com/Wandalen/wTools/tree/master/module/core/test_tools"
homepage = "https://github.com/Wandalen/wTools/tree/master/module/core/test_tools"
description = """
Tools for writing and running tests.
"""
categories = [ "algorithms", "development-tools" ]
keywords = [ "fundamental", "general-purpose", "testing" ]

[lints]
workspace = true

[package.metadata.docs.rs]
features = [ "normal_build", "enabled" ]
all-features = false
no-default-features = false
# features = [ "full" ]
# all-features = false

# = features

[features]
default = [
  "enabled",
  # "standalone_build",
  "normal_build",
  "process_tools",
  "process_environment_is_cicd",
]
full = [
  "default"
]
# CRITICAL: This feature controls doctest-specific behavior but can break test compilation
# if used incorrectly. See REGRESSION PREVENTION notes below.
doctest = [] # for doctest shortcomings resolution
# doctest does not work properly for aggregators

# REGRESSION PREVENTION WARNING:
# The 'doctest' feature is enabled by rustdoc during documentation builds and 
# by some test configurations. DO NOT use #[cfg(not(feature = "doctest"))] to
# hide public API modules as this breaks test compilation.
#
# SAFE USAGE: Use doctest feature for documentation-specific logic inside modules,
# but never to conditionally hide entire public modules or namespace structures.
#
# HISTORICAL CONTEXT: Task 001 fixed 147 compilation errors caused by doctest
# cfg gates hiding the public API from tests. See task/completed/001_*.md
no_std = [
]
use_alloc = [
  "no_std",
]
enabled = [
]
# nightly = [ "typing_tools/nightly" ]

normal_build = [
  "dep:error_tools",
  "dep:collection_tools",
  "dep:impls_index",
  "dep:mem_tools",
  "dep:typing_tools",
  "dep:diagnostics_tools",
  "collection_constructors",
  "collection_into_constructors",
]

# standalone_build vesion of build is used to avoid cyclic dependency
# when crate depend on itself
standalone_build = [
  "standalone_error_tools",
  "standalone_collection_tools",
  "standalone_impls_index",
  "standalone_mem_tools",
  "standalone_typing_tools",
  "standalone_diagnostics_tools",
]
standalone_error_tools = [ "dep:anyhow", "dep:thiserror", "error_typed", "error_untyped" ]
standalone_collection_tools = [ "dep:hashbrown", "collection_constructors", "collection_into_constructors" ]
standalone_impls_index = [ "dep:impls_index_meta" ]
standalone_mem_tools = []
standalone_typing_tools = [ "typing_implements", "typing_is_slice", "typing_inspect_type" ]
standalone_diagnostics_tools = [ "diagnostics_runtime_assertions", "diagnostics_compiletime_assertions", "diagnostics_memory_layout" ]

# error_tools
error_typed = []
error_untyped = []
# collection_tools - CRITICAL for test compilation
# These features must be enabled AND their macros must be explicitly re-exported
# in src/lib.rs for aggregated tests to access them. See src/lib.rs macro re-export
# documentation for details.
collection_constructors = []       # Enables heap!, vec!, bmap!, etc.
collection_into_constructors = []  # Enables into_heap!, into_vec!, etc.

# REGRESSION PREVENTION: If these features are enabled but the corresponding
# macros are not re-exported in src/lib.rs, tests will fail with E0433 errors
# like "could not find `heap` in `the_module`". See Task 002 resolution.
# typing_tools
typing_inspect_type = [ "inspect_type/enabled" ]
typing_is_slice = [ "is_slice/enabled" ]
typing_implements = [ "implements/enabled" ]
# diagnostics_tools
diagnostics_runtime_assertions = [ "dep:pretty_assertions" ] # run-time assertions
diagnostics_compiletime_assertions = [] # compile-time assertions
diagnostics_memory_layout = [] #
# process_tools
process_tools = []
process_environment_is_cicd = []

[dependencies]

## external

# xxx : make sure we use workspace dependencies only
# trybuild = { version = "1.0.85", features = [ "diff" ] }
trybuild = { workspace = true, features = [ "diff" ] }
rustversion = { workspace = true }
num-traits = { workspace = true }
rand = { workspace = true }
# tempdir = { workspace = true }

## internal

error_tools = { workspace = true, features = [ "full" ], optional = true }
collection_tools = { workspace = true, features = [ "full" ], optional = true }
impls_index = { workspace = true, features = [ "full" ], optional = true }
mem_tools = { workspace = true, features = [ "full" ], optional = true }
typing_tools = { workspace = true, features = [ "full" ], optional = true }
diagnostics_tools = { workspace = true, features = [ "full" ], optional = true }


## transient

# error_tools
anyhow = { workspace = true, optional = true }
thiserror = { workspace = true, optional = true }
# collection_tools
hashbrown = { workspace = true, optional = true }
# impls_index
impls_index_meta = { workspace = true, optional = true }
# typing_tools
inspect_type = { workspace = true, optional = true }
is_slice = { workspace = true, optional = true }
implements = { workspace = true, optional = true }
# diagnostics_tools
pretty_assertions = { workspace = true, optional = true }

[build-dependencies]
rustc_version = "0.4"
