#[allow(clippy::used_underscore_binding, clippy::all, warnings)]
// Purpose: Provides shared test assertions and logic for verifying the standalone constructors
// generated by `#[ derive( Former ) ]` for enums with unit variants.
// This file is included by `standalone_constructor_unit_derive.rs`.
//
// Coverage:
// - Rule 4a (#[ standalone_constructors ]): Tests the standalone function `unit_variant()`.
//
// Test Relevance/Acceptance Criteria:
// - Defines a test function (`unit_variant_test`) that invokes the standalone constructor
//   `unit_variant()` provided by the including file (derived).
// - Asserts that the instance created by this constructor is equal to the expected
//   enum variant (`TestEnum::UnitVariant`).
//
// File: module/core/former/tests/inc/former_enum_tests/unit_tests/standalone_constructor_unit_only_test.rs

// Use the items defined in the including file (manual or derive)
use super::*;

/// Tests the standalone constructor for a unit variant.
#[ test ]
fn unit_variant_test() // Use enum-specific test name
{
  // Call the constructor function (manual or derived)
  // Assumes `unit_variant` is defined in the including scope
  let instance = unit_variant();

  // Define the expected enum instance (using the consistent enum name)
  let expected = TestEnum::UnitVariant; // Use TestEnum

  // Assert that the formed instance matches the expected one
  assert_eq!( instance, expected );
}