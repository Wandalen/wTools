// //!
// //! Derive-based tests for standalone constructors for enums.
// //! This file defines an enum mirroring the manual one but uses the derive macro
// //! with the new attributes (`standalone_constructors`, `arg_for_constructor`).
// //! It includes the shared test logic. This file is expected *not* to compile
// //! successfully until the derive macro implementation is updated.
// //!
//
// #[ allow( unused_imports ) ]
// use ::former::prelude::*;
// use ::former::Former; // Import derive macro
//
// // === Enum Definition ===
//
// /// Enum using derive for standalone constructors.
// // Attributes to be implemented by the derive macro
// #[ derive( Debug, PartialEq, Clone, Former ) ]
// #[ standalone_constructors ] // New attribute
// pub enum TestEnum // Consistent name
// {
//   /// A unit variant.
//   UnitVariant,
//   /// A tuple variant with one field.
//   TupleVariant // Defaults to subformer behavior
//   (
//     // #[ arg_for_constructor ] // <<< Removed for now, caused error E0609
//     i32
//   ),
//   /// A struct variant with one field.
//   StructVariant // Defaults to subformer behavior
//   {
//     // #[ arg_for_constructor ] // <<< Removed for now
//     field : String,
//   },
// }
//
// // === Standalone Constructor Calls (Expected Usage in Tests) ===
// // These functions are expected to be generated by the derive macro eventually.
//
// /*
// // Expected generated constructor for TestEnum::UnitVariant
// pub fn unit_variant() -> TestEnum { ... }
//
// // Expected generated constructor for TestEnum::TupleVariant (Subformer)
// pub fn tuple_variant() -> TestEnumTupleVariantFormer< ... > { ... } // Takes no args yet
//
// // Expected generated constructor for TestEnum::StructVariant (Subformer)
// pub fn struct_variant() -> TestEnumStructVariantFormer< ... > { ... } // Takes no args yet
// */
//
//
// // === Include Test Logic ===
// // Includes tests that call the *expected* generated functions.
// include!( "standalone_constructor_only_test.rs" ); // Use the consistent name

// qqq : xxx : not ready
