
name : rust_push

on :

  workflow_call :
    inputs :
      manifest_path :
        required : true
        type : string
      module_name :
        required : true
        type : string

concurrency :

  group : standard_rust_push_${{ inputs.module_name }}_${{ github.ref }}
  cancel-in-progress : true

env :

  CARGO_TERM_COLOR : always
  WITH_SMOKE : false

jobs :

  fast :
    if : "!contains( github.event.head_commit.message, '!test' )
      && !startsWith( github.event.head_commit.message, 'Merge' )
      && contains( github.event.head_commit.message, inputs.module_name )"
    strategy :
      fail-fast : false
      matrix :
        os : [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on : ${{ matrix.os }}
    steps :
    - name : Install latest stable toolchain
      uses : actions-rs/toolchain@v1
      with :
        toolchain : stable
        override : true
    - uses : actions/checkout@v2
    - name : Install cargo-hack
      run : cargo install cargo-hack
    - name : Run all tests
      run : cargo test --manifest-path ${{ inputs.manifest_path }}
    - name : Run all tests with each feature
      run : cargo hack test --manifest-path ${{ inputs.manifest_path }} --each-feature

  full :

    if : "contains( github.event.head_commit.message, '!test' )
      || startsWith( github.event.head_commit.message, 'Merge' )"
    strategy :
      fail-fast : false
      matrix :
        os : [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on : ${{ matrix.os }}

    steps :

    - name : Install latest stable toolchain
      uses : actions-rs/toolchain@v1
      with :
        toolchain : stable
        override : true
    - uses : actions/checkout@v2
    - name : Run all tests without features
      run : cargo test --manifest-path ${{ inputs.manifest_path }} --release

    - name : Install latest nightly toolchain
      uses : actions-rs/toolchain@v1
      with :
        toolchain : nightly
        override : true
    - uses : actions/checkout@v2
    - name : Install cargo-hack
      run : cargo install cargo-hack
    - name : Run all tests with default features
      run : cargo test --manifest-path ${{ inputs.manifest_path }}
    - name : Run all tests without default features
      run : cargo test --manifest-path ${{ inputs.manifest_path }} --no-default-features
    - name : Run all tests with all features
      run : cargo test --manifest-path ${{ inputs.manifest_path }} --all-features
    - name : Run all tests with each feature
      run : cargo hack test --manifest-path ${{ inputs.manifest_path }} --each-feature
