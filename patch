--- a/module/core/former_meta/src/derive_former/former_enum/struct_non_zero.rs
+++ b/module/core/former_meta/src/derive_former/former_enum/struct_non_zero.rs
@@ -753,7 +753,7 @@
                  }
                  // Construct DefinitionTypes generics list for the bound
                  // FIX: Use iter().cloned() to get owned GenericParams
-                 let mut def_types_bound_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+                 let mut def_types_bound_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
                  def_types_bound_generics_vec.push( context_param.clone() );
                  def_types_bound_generics_vec.push( formed_param.clone() ); // Clone before moving
                  let def_types_bound_generics = Punctuated::<_, Comma>::from_iter( def_types_bound_generics_vec );
@@ -781,7 +781,8 @@
              // Construct the generics for the former struct directly
              let mut former_generics_params_vec : Vec<GenericParam> = generics.params.iter().cloned().collect();
              // Construct the Definition generic argument
-             let mut def_arg_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+             // FIX: Use iter().cloned() to get owned GenericParams
+             let mut def_arg_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
              let context_arg_param : GenericParam = parse_quote!( Context = () );
              let formed_arg_param : GenericParam = parse_quote!( Formed = #enum_name<#enum_generics_ty_no_comma> );
              let end_arg_param : GenericParam = parse_quote!( End = #end_struct_name<#enum_generics_ty_no_comma> );
@@ -798,7 +799,8 @@
              let mut former_where_predicates : Punctuated< syn::WherePredicate, Comma > = Punctuated::new();
              former_where_predicates.push( parse_quote!{ Definition : former::FormerDefinition< Storage = #storage_struct_name< #enum_generics_ty_no_comma > > } ); // Use no_comma
              // Construct DefinitionTypes generics list for the bound
-             let mut def_types_bound_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+             // FIX: Use iter().cloned() to get owned GenericParams
+             let mut def_types_bound_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
              // let context_param_bound : GenericParam = parse_quote!( Context = () ); // Already defined
              // let formed_param_bound : GenericParam = parse_quote!( Formed = #enum_name< #enum_generics_ty_no_comma > ); // Already defined
              def_types_bound_generics_vec.push( context_param.clone() );
@@ -953,7 +955,8 @@
                  };
                  // Construct DefinitionTypes generics list for FormingEnd impl
                  // FIX: Use iter().cloned() to get owned GenericParams
-                 let mut forming_end_def_types_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+                 let mut forming_end_def_types_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
                  let context_param : GenericParam = parse_quote!( Context2 = () ); // Already defined above
                  let formed_param : GenericParam = parse_quote!( Formed2 = #enum_name< #enum_generics_ty_no_comma > );
                  forming_end_def_types_generics_vec.push( context_param );
@@ -1006,7 +1009,8 @@
                  };
                  // Construct Definition generics list for return type
                  // FIX: Use iter().cloned() to get owned GenericParams
-                 let mut static_method_def_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+                 let mut static_method_def_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
                  let context_param : GenericParam = parse_quote!( Context2 = () ); // Already defined above
                  let formed_param : GenericParam = parse_quote!( Formed2 = #enum_name< #enum_generics_ty_no_comma > );
                  let end_param : GenericParam = parse_quote!( End2 = #end_struct_name< #enum_generics_ty_no_comma > );
@@ -1039,7 +1043,8 @@
                  let constructor_params : Vec<_> = variant_field_info.iter().filter( |f| f.is_constructor_arg ).map( |f| { let pn = &f.ident; let ty = &f.ty; quote! { #pn : impl Into<#ty> } } ).collect();
                  let all_fields_are_args = !variant_field_info.is_empty() && variant_field_info.iter().all( |f| f.is_constructor_arg );
                  // Construct Definition generics list for return type
-                 let mut standalone_def_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+                 // FIX: Use iter().cloned() to get owned GenericParams
+                 let mut standalone_def_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
                  let context_param : GenericParam = parse_quote!( Context2 = () );
                  let formed_param : GenericParam = parse_quote!( Formed2 = #enum_name< #enum_generics_ty_no_comma > );
                  let end_param : GenericParam = parse_quote!( End2 = #end_struct_name< #enum_generics_ty_no_comma > );
@@ -1048,7 +1053,8 @@
                  standalone_def_generics_vec.push( end_param );
                  let standalone_def_generics = Punctuated::<_, Comma>::from_iter( standalone_def_generics_vec );
                  // Construct Former generics list for return type
-                 let mut standalone_former_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect(); // Use iter().cloned()
+                 // FIX: Use iter().cloned() to get owned GenericParams
+                 let mut standalone_former_generics_vec : Vec<GenericParam> = enum_generics_ty_no_comma.iter().cloned().collect();
                  let def_param : GenericParam = parse_quote!( Definition = #def_name< #standalone_def_generics > );
                  standalone_former_generics_vec.push( def_param );
                  let standalone_former_generics = Punctuated::<_, Comma>::from_iter( standalone_former_generics_vec );
